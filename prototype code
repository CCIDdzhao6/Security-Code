#include <WiFi.h>
#include <HTTPClient.h>
#include <Base64.h>
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_PN532.h>

#define PN532_SCK  (2)
#define PN532_MOSI (3)
#define PN532_SS   (4)
#define PN532_MISO (5)

// If using the breakout or shield with I2C, define just the pins connected
// to the IRQ and reset lines.  Use the values below (2, 3) for the shield!
#define PN532_IRQ   (2)
#define PN532_RESET (3) 

Adafruit_PN532 nfc(PN532_IRQ, PN532_RESET);

#define RELAY1_PIN 16
#define RELAY2_PIN 17

// Replace with your network credentials
const char* ssid = "fuse33-equipment";
const char* password = "FuseEquipment";

// Replace with your Formidable Form API endpoint
const char* serverName = "https://fuse33.com/wp-json/frm/v2/entries";

// API key
const char* apiKey = "30HK-EG90-3UEP-7RMM";

// Define the ID array to match
const uint8_t ID[4] = {0x00, 0x00, 0x00, 0x00};

void setup() {
  Serial.begin(115200);

  while (!Serial) delay(10); // for Leonardo/Micro/Zero

  Serial.println("Hello!");

  nfc.begin();

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println("Connected to the WiFi network");

  uint32_t versiondata = nfc.getFirmwareVersion();
  if (!versiondata) {
    Serial.print("Didn't find PN53x board");
    while (1); // halt
  }
  // Got ok data, print it out!
  Serial.print("Found chip PN5"); Serial.println((versiondata >> 24) & 0xFF, HEX);
  Serial.print("Firmware ver. "); Serial.print((versiondata >> 16) & 0xFF, DEC);
  Serial.print('.'); Serial.println((versiondata >> 8) & 0xFF, DEC);

  Serial.println("Waiting for an ISO14443A Card ...");

  // Initialize relay pins
  pinMode(RELAY1_PIN, OUTPUT);
  pinMode(RELAY2_PIN, OUTPUT);
  digitalWrite(RELAY1_PIN, LOW);
  digitalWrite(RELAY2_PIN, LOW);
}

void loop(void) {
  uint8_t success;
  uint8_t uid[] = {0, 0, 0, 0, 0, 0, 0}; // Buffer to store the returned UID
  uint8_t uidLength; // Length of the UID (4 or 7 bytes depending on ISO14443A card type)

  // Wait for an ISO14443A type cards (Mifare, etc.).  When one is found
  // 'uid' will be populated with the UID, and uidLength will indicate
  // if the uid is 4 bytes (Mifare Classic) or 7 bytes (Mifare Ultralight)
  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);

  if (success) {
    // Display some basic information about the card
    Serial.println("Found an ISO14443A card");
    Serial.print("  UID Length: "); Serial.print(uidLength, DEC); Serial.println(" bytes");
    Serial.print("  UID Value: ");
    nfc.PrintHex(uid, uidLength);
    Serial.println("");

    if (uidLength == 4) {
      // We probably have a Mifare Classic card ...
      Serial.println("Seems to be a Mifare Classic card (4 byte UID)");

      // Now we need to try to authenticate it for read/write access
      // Try with the factory default KeyA: 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
      Serial.println("Trying to authenticate block 4 with default KEYA value");
      uint8_t keya[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

      // Start with block 4 (the first block of sector 1) since sector 0
      // contains the manufacturer data and it's probably better just
      // to leave it alone unless you know what you're doing
      success = nfc.mifareclassic_AuthenticateBlock(uid, uidLength, 4, 0, keya);

      if (success) {
        Serial.println("Sector 1 (Blocks 4..7) has been authenticated");
        uint8_t data[16];

        // Try to read the contents of block 4
        success = nfc.mifareclassic_ReadDataBlock(4, data);

        if (success) {
          // Data seems to have been read ... spit it out
          Serial.println("Reading Block 4:");
          nfc.PrintHexChar(data, 16);
          Serial.println("");

          // Check if the first four bytes match the ID array
          if (memcmp(data, ID, 4) == 0) {
            Serial.println("Card contains ID, triggering relays.");
            digitalWrite(RELAY1_PIN, HIGH); // Trigger Relay 1
            digitalWrite(RELAY2_PIN, HIGH); // Trigger Relay 2
            delay(1000); // Keep the relays on for 1 second
            digitalWrite(RELAY1_PIN, LOW); // Turn off Relay 1
            digitalWrite(RELAY2_PIN, LOW); // Turn off Relay 2
          }

          // Wait a bit before reading the card again
          delay(1000);
        } else {
          Serial.println("Ooops ... unable to read the requested block. Try another key?");
        }
      } else {
        Serial.println("Ooops ... authentication failed: Try another key?");
      }
    }

    if (uidLength == 7) {
      // We probably have a Mifare Ultralight card ...
      Serial.println("Seems to be a Mifare Ultralight tag (7 byte UID)");

      // Try to read the first general-purpose user page (#4)
      Serial.println("Reading page 4");
      uint8_t data[32];
      success = nfc.mifareultralight_ReadPage(4, data);
      if (success) {
        // Data seems to have been read ... spit it out
        nfc.PrintHexChar(data, 4);
        Serial.println("");

        // Check if the first four bytes match the ID array
        if (memcmp(data, ID, 4) == 0) {
          Serial.println("Card contains ID, triggering relays.");
          digitalWrite(RELAY1_PIN, HIGH); // Trigger Relay 1
          digitalWrite(RELAY2_PIN, HIGH); // Trigger Relay 2
          delay(1000); // Keep the relays on for 1 second
          digitalWrite(RELAY1_PIN, LOW); // Turn off Relay 1
          digitalWrite(RELAY2_PIN, LOW); // Turn off Relay 2
        }

        // Wait a bit before reading the card again
        delay(1000);
      } else {
        Serial.println("Ooops ... unable to read the requested page!?");
      }
    }

    // Make a HTTP POST request
    if (WiFi.status() == WL_CONNECTED) {
      HTTPClient http;

      // Specify content-type header
      http.begin(serverName); // Specify the URL
      http.addHeader("Content-Type", "application/json");

      // Create Basic Authentication header
      String authHeader = "Basic " + base64::encode(String(apiKey) + ":");

      // Add Authorization header
      http.addHeader("Authorization", authHeader);

      // variable parts of the JSON payload
      String idNumber = String(uid[0]); // Use uid instead of data to avoid shadowing
      String postData = "Access Granted"; // Renamed to postData to avoid shadowing

      // Create JSON payload
      String jsonPayload = "{\"form_id\":\"114\",\"api_test_data\":\"" + postData + "\",\"api_test_card_id\":\"" + idNumber + "\"}";

      // Debug: Print the payload
      Serial.print("JSON Payload: ");
      Serial.println(jsonPayload);

      // Send HTTP POST request
      int httpResponseCode = http.POST(jsonPayload);

      // Check the returning code
      if (httpResponseCode > 0) {
        String response = http.getString();
        Serial.println(httpResponseCode); // Print return code
        Serial.println(response); // Print request response payload
      } else {
        Serial.print("Error on sending POST: ");
        Serial.println(httpResponseCode);
      }

      // Free resources
      http.end();
    } else {
      Serial.println("Error in WiFi connection");
    }
  }
}
